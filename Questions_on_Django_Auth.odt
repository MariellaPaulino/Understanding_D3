
====================
Understanding the Django Authentication Process 
=====================

1. In web app security, what's the difference between "authorization" and "authentication"?
Authentication verifies a user is who they claim to be, and authorization determines what an authenticated user is allowed to do.  
--------------------
To simplify authentication woud be like a hand scanner that makes sure that for you to have access to a piece of information you are who you say you are.  
Whereas authorization is the level of clearance you have to edit or view certain materials such as viewing information versus viewing and editing information.  


2.  The docs say that users' passwords get stored as "hash"es, not strings of the text they actually typed in. What's a hash?
--------------------
Password hashing allows systems not to store the plain text version of a password, yet enables them to verify whether the user trying to gain entry knows that password. Hashing is the transformation of a string of characters into a usually shorter fixed-length value or key that represents the original string.  

password          Hashing Function          What is stored as a password 
IloveShoes3!      (--------------)          1


3. Why do you think Django's authentication system doesn't just let us see users' passwords in the database, stored as strings?
--------------------
If passwords were saved as string, anyone with authorization would be able to see the passwords.  This could also give too much power to the database manager as they would be able to log into the system and view the passwords.  ALlowing noone but the users themselves to access their passwords is ideal as this prevents people having access to information which they should not have access to. 


4. What's OAuth (not necessary for Django, though you can use it)? This is a big thing to know about in open source software
--------------------
Logging into another site with your Google, Twitter, or Facebook account isn't just convenient; it's more secure than creating a new account, or entering your Google, Twitter, or Facebook password into a third-party site. That's where OAuth comes in. 

Lets say you want to use an app like Tweetgif to post funny, animated GIF files to your Twitter account. In order to do so, you need to give the Tweetgif app access to your account, so it can get your info and post tweets on your behalf. In the old days, you would have to give an app like Tweetgif your Twitter username and password, so it could log in and access those services. You not only had to trust them to use those credentials wisely, but also to keep them safe from hackersâ€”that's a pretty big leap of faith. It's like giving your house keys to a stranger and trusting them not to make copies for all their friends and steal all of your stuff.

OAuth gets around this problem by only giving them access to the stuff you want them to access. Instead of asking you for your password, this happens:

In order to become a Twitter app, Tweetgif has acquired two tokens from the Twitter service: a "Consumer Key" and a "Consumer Secret". These are what create a connection between the consumer (in this case, Tweetgif) and the service provider (in this case, Twitter).When you visit Tweetgif and ask it to access your Twitter account, it will redirect you back to Twitter. If you aren't logged in to Twitter, you log in now (remember, you're giving your username and password to Twitter itself, not to Tweetgif).

>>Instead of giving the keys to your entire house, you've given a special key that only opens the one room you want them to access. But, in order to use this key, they have to go get it from the guard, and he can take it away from them at any time.<<











